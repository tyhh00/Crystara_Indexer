generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model BlockProgress {
  id              Int      @id @default(1)
  lastBlockHeight BigInt
  updatedAt       DateTime @updatedAt
}

model EventTracking {
  id              Int      @id @default(autoincrement())
  eventType       String
  blockHeight     BigInt
  transactionHash String
  processed       Boolean  @default(false)
  error           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([eventType])
  @@index([blockHeight])
  @@index([processed])
}

model Rarity {
  id         Int      @id @default(autoincrement())
  rarityName String
  weight     BigInt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lootboxId  Int
  lootbox    Lootbox  @relation(fields: [lootboxId], references: [id])
  tokens     Token[]

  @@index([lootboxId])
  @@index([rarityName])
}

model Token {
  id                Int             @id @default(autoincrement())
  rarityId          Int?
  tokenName         String
  tokenUri          String
  maxSupply         BigInt
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  circulatingSupply BigInt
  tokensBurned      BigInt
  propertyVersion   BigInt          @default(0)
  propertyMaps      PropertyMap[]
  tokenCollectionId Int
  rarity            Rarity?         @relation(fields: [rarityId], references: [id])
  tokenCollection   TokenCollection @relation(fields: [tokenCollectionId], references: [id])
  balances          TokenBalance[]

  @@unique([tokenCollectionId, tokenName, propertyVersion])
  @@index([tokenCollectionId])
  @@index([rarityId])
  @@index([tokenName])
  @@index([propertyVersion])
}

model PropertyMap {
  id              Int      @id @default(autoincrement())
  tokenId         Int      // Reference to base Token
  propertyVersion BigInt   // The property version number
  token           Token    @relation(fields: [tokenId], references: [id])
  keys            String[] // Array of property keys
  values          Json // Array of property values
  types           String[] // Array of property types
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([tokenId, propertyVersion])
  @@index([tokenId])
  @@index([propertyVersion])
}

model Lootbox {
  id                        Int               @id @default(autoincrement())
  price                     BigInt
  priceCoinType             String
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  timestamp                 BigInt
  purchaseCount             Int               @default(0)
  totalVolume               BigInt            @default(0)
  isActive                  Boolean
  availableStock            BigInt
  maxStock                  BigInt
  autoTriggerActiveTime     BigInt
  autoTriggerWhitelistTime  BigInt
  isWhitelisted             Boolean
  collectionName            String
  creatorAddress            String
  metadataUri               String
  tokenCollectionId         Int?
  collectionResourceAddress String
  collectionDescription     String
  tokenCollection           TokenCollection?  @relation(fields: [tokenCollectionId], references: [id])
  analytics                 LootboxAnalytics?
  purchases                 LootboxPurchase[]
  rarities                  Rarity[]
  followers                 Account[]         @relation("LootboxFollowers")
  watchlistedBy             Account[]         @relation("LootboxWatchlist")

  @@index([tokenCollectionId])
  @@index([creatorAddress])
  @@index([collectionName])
  @@index([priceCoinType])
  @@index([isActive])
  @@index([totalVolume])
  @@index([purchaseCount])
}

model LootboxPurchase {
  id            Int             @id @default(autoincrement())
  lootboxId     Int
  buyerAddress  String
  quantity      BigInt
  nonce         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  price         BigInt
  priceCoinType String
  buyer         Account         @relation(fields: [buyerAddress], references: [address])
  lootbox       Lootbox         @relation(fields: [lootboxId], references: [id])
  rewards       LootboxReward[]

  @@index([lootboxId])
  @@index([buyerAddress])
  @@index([nonce])
  @@index([createdAt])
  @@index([price])
}

model LootboxReward {
  id             Int             @id @default(autoincrement())
  purchaseId     Int
  selectedToken  String
  selectedRarity String
  randomNumber   String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  buyerAddress   String
  collectionName String
  nonce          String
  timestamp      BigInt
  purchase       LootboxPurchase @relation(fields: [purchaseId], references: [id])

  @@index([purchaseId])
  @@index([selectedToken])
  @@index([selectedRarity])
}

model VRFCallback {
  id            Int      @id @default(autoincrement())
  callerAddress String
  nonce         String
  randomNumbers String[]
  timestamp     BigInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([callerAddress])
  @@index([nonce])
  @@index([timestamp])
}

model TokenClaim {
  id                   Int      @id @default(autoincrement())
  claimer              String
  claimResourceAddress String
  totalTokens          BigInt
  timestamp            BigInt
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  tokensClaimed        Json

  @@index([claimer])
  @@index([claimResourceAddress])
  @@index([timestamp])
}

model TokenMint {
  id          Int      @id @default(autoincrement())
  amount      BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tokenDataId Json
}

model TokenData {
  id                       Int      @id @default(autoincrement())
  creator                  String
  collection               String
  name                     String
  description              String
  maximum                  BigInt
  uri                      String
  royaltyPayeeAddress      String
  royaltyPointsDenominator BigInt
  royaltyPointsNumerator   BigInt
  propertyKeys             String[]
  propertyValues           Json
  propertyTypes            String[]
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@unique([creator, collection, name])
  @@index([creator])
  @@index([collection])
  @@index([name])
}

model TokenCollection {
  id          Int       @id @default(autoincrement())
  creator     String
  name        String
  description String
  uri         String
  maximum     BigInt
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lootboxes   Lootbox[]
  tokens      Token[]

  @@unique([creator, name])
  @@index([creator])
  @@index([name])
}

model TokenDeposit {
  id        Int      @id @default(autoincrement())
  tokenId   Json
  amount    BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  toAddress String
}

model TokenWithdraw {
  id          Int      @id @default(autoincrement())
  tokenId     Json
  amount      BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fromAddress String
}

model TokenBurn {
  id          Int      @id @default(autoincrement())
  tokenId     Json
  amount      BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fromAddress String
}

model Account {
  address           String             @id
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  purchases         LootboxPurchase[]
  tokenBalances     TokenBalance[]
  tokenTransactions TokenTransaction[]
  followedLootboxes Lootbox[]          @relation("LootboxFollowers")
  watchedLootboxes  Lootbox[]          @relation("LootboxWatchlist")

  @@index([address])
}

model TokenBalance {
  id              Int      @id @default(autoincrement())
  accountAddress  String
  tokenDataId     Json
  tokenId         Int?
  propertyVersion BigInt   @default(0)
  balance         BigInt
  lastUpdated     DateTime @updatedAt
  token           Token?   @relation(fields: [tokenId], references: [id])
  account         Account  @relation(fields: [accountAddress], references: [address])

  @@unique([accountAddress, tokenDataId, propertyVersion])
  @@index([accountAddress])
  @@index([tokenId])
}

model TokenTransaction {
  id              Int      @id @default(autoincrement())
  accountAddress  String
  tokenDataId     Json
  transactionType String
  amount          BigInt
  createdAt       DateTime @default(now())
  fromAddress     String?
  toAddress       String?
  account         Account  @relation(fields: [accountAddress], references: [address])

  @@index([accountAddress])
  @@index([tokenDataId])
  @@index([transactionType])
  @@index([createdAt])
  @@index([fromAddress])
  @@index([toAddress])
}

model LootboxAnalytics {
  id              Int      @id @default(autoincrement())
  lootboxId       Int      @unique
  volume24h       BigInt   @default(0)
  purchases24h    Int      @default(0)
  uniqueBuyers24h Int      @default(0)
  updatedAt       DateTime @updatedAt
  lootbox         Lootbox  @relation(fields: [lootboxId], references: [id])

  @@index([volume24h])
  @@index([purchases24h])
  @@index([uniqueBuyers24h])
}

model OFFChain_Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OFFChain_Account {
  id            Int       @id @default(autoincrement())
  walletAddress String    @unique
  email         String?   @unique
  username      String?   @unique
  preferences   Json?
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model OFFChain_LootboxStats {
  id               Int      @id @default(autoincrement())
  lootboxId        Int      @unique
  url              String   @unique
  viewCount        Int      @default(0)
  likeCount        Int      @default(0)
  trendingScore    Float    @default(0)
  categories       String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isAdvertised     Boolean  @default(false)
  isVerified       Boolean  @default(false)
  rarityColorMap String?

  @@index([url])
}
